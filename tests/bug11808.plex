<?php

define('UNDEFINED',0);
define('INTEGER',1);
define('FLOAT',2);
define('NUMBER',3);

class Bug11808Lexer
{
    private $counter;
    public $token;
    public $value;
    private $line;
    private $column;
    private $input;
    public $state = 1;

    private $prevTokenType = UNDEFINED;

    function __construct($input)
    {
        $this->input = $input;
        $this->N = 0;
        $this->line = 1;
    }

/*!lex2php
%counter {$this->counter}
%input {$this->input}
%token {$this->token}
%value {$this->value}
%line {$this->line}
%column {$this->column}
WHITESPACE = /[ \t\n]/
WORD = /[a-zA-Z]+/
FLOAT = /[+-]?([0-9]+\.[0-9]+|\.[0-9]+|[0-9]+\.)/
INTEGER = /[+-]?[0-9]+/
MATH_OPERATOR = /[\^*\/%+-]/
UNKNOWN = /./
*/

/*!lex2php
%statename START
WHITESPACE {
    return false; //ignore this token
}

WORD {
    echo 'word: '.$this->value.'<br>';
}

MATH_OPERATOR {
    if($this->prevTokenType != NUMBER)
    {
        return 'more'; //cycle to the next matching rule
    }
        echo 'operator: '.$this->value.'<br>';
}

FLOAT {
    echo 'float: '.$this->value.'<br>'; // Important FLOAT must have higher precedence than INTEGER
    $this->prevTokenType = NUMBER;
}

INTEGER {
    echo 'Integer :'.$this->value.'<br>';
    $this->prevTokenType = NUMBER;
}

UNKNOWN {
    echo 'Unknown : '.$this->value.'<br>';

}
*/

}

?>
